<div xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://hl7.org/fhir ../../input-cache/schemas/R5/fhir-single.xsd">
<style>
table {
  border-collapse: collapse;
  width: 100%;
}
td, th {
  border: 1px solid #dddddd;
  text-align: left;
  padding: 8px;
}
tr:nth-child(even) {
  background-color: #dddddd;
}
</style>
<p>
The Tinkar Reference Model is a logical model described herein using the <i>Object Management Group (OMG) 
Unified Modeling Language (UML) 2.0</i> notation to describe the structure of integrated data representation 
and change management for biomedical terminologies. Tinkar provides an architecture that delivers integrated 
terminology to the enterprise and its information systems. In doing so, it addresses the differences in 
management and structure across reference terminology, local concepts, and code lists/value sets. This 
section describes classes of objects that support a common foundational framework for terminology and 
knowledge base systems (e.g., SNOMED CT®, LOINC®, RxNorm, HL7). An implementation of Tinkar can provide a 
single representation for all terminologies required in the U.S. and other countries, while also providing a 
better foundation for managing change. Tinkar could support the operation of a variety of systems intended 
to deliver knowledge management for terminology to vendors providers, and standards-development 
organizations like HL7. 
</p>
<a name="standard model"> </a>
<h3>Standard Class Model </h3>
<img src="ClassVersionComponent.png" alt="Class Version"/>
<p>
The Tinkar Reference Model fulfills the requirement of capturing a complete record of all changes, including 
relevant context information using versioned components as shown in the figure above. This is captured via the STAMP class using the following fields: 
</p>
<ol>
  <li>
  <b>Status:</b> A status is identified by a concept, which may be annotated with other identifying information. 
  For example: active or inactive (Requirement 19) 
  </li>
  <li>
  <b>Time:</b> Timestamps must employ a common standard, which must support precision and time zone. (Requirement 20) 
  </li>
  <li>
  <b>Author:</b> An author is identified by a concept, which may be annotated with other identifying information as required. (Requirement 21) 
  </li>
  <li>
  <b>Module:</b> Assignment to the appropriate terminology (e.g., LOINC) or terminology component (e.g., SNOMED CT®, US Extension). 
  A module is identified by a concept, which may be annotated with other identifying information. (Requirement 22) 
  </li>
  <li>
  <b>Path:</b> Specification of an object under version control within a terminology development lifecycle, e.g., 
  for distributed development, testing, staging, or production. A path is a common synomyn for “branch” as 
  used in current software version control best practices/literature. A path is identified by a concept, 
  which may be annotated with other identifying information. A core set of paths is necessary to support 
  publication to external organizations. (Requirement 23) 
  </li>
</ol>
<p>
These elements together are referred to by the acronym “<b>STAMP</b>,” as described previously. Every new assertion, 
whether a new component or a change to an existing component, must have a STAMP to determine when it is to 
be used. The STAMP properties support the ability to apply terminology components for specific purposes. 
For example, 
</p>
<ul>
  <li>
  “Path” can be used to test provisional content without physically swapping out systems. 
  </li>
  <li>
  “Module” can be used to filter out work that has not been authorized by the enterprise. 
  </li>
  <li>
  “Time” supports the ability to apply CDS rules as they would have looked in the past. 
  </li>
</ul>
<p>
The Tinkar Reference Model does not merely support the ability to “STAMP” components; it asserts a 
requirement that all changes have a STAMP. STAMP assertions are unversioned IdentifiedComponents that are 
referenced by the components they scope. Since STAMP uses versioned concepts (that have a STAMP), having the 
STAMP as a versioned component would lead to an infinite regress. 
</p>
<p>
Not all terminology systems contain all the information recorded in STAMP, but defaults can be used in cases 
where it is missing. For example, SNOMED CT contains the Status, Time, and Module but do not distribute the 
Path or Author. Since most terminologies only release a Production path, the Path could be defaulted to 
Production Path and the Author could be defaulted to SNOMED CT Author. 
</p>
<p>
All IdentifedComponents in the knowledge base will consist of a series of change records, called 
ComponentVersions, (beginning with the “Create” version), all associated to an underlying 
ComponentChronology. 
</p>
<p>
A Components Chronology only has properties attributed to it by its versions. Looking at the 
IdentifiedComponent through different sets of changes (published version, geographically defined set of 
modules, historical timestamp) may reveal substantially different IdentifedComponents. 
</p>
<a name="component types"> </a>
<h3>Component Types</h3>
<img src="ComponentTypes.png" alt="Component Types"/>
<p>
All Components in Tinkar are uniquely identified using UUIDs. A Component will be represented by an array of 
UUIDs with at least one UUID, but can be represented by more than one UUID in the case of a concept being 
derived from multiple sources as shown in the figure above. For example, the concept Acetaminophen (which exists in SNOMED CT®, LOINC, 
and RxNorm) could have a UUID from each terminology and be represented as an array of UUIDs for this single 
concept within a Tinkar implementation. 
</p>
<p>
A Concept is identified using UUIDs and contains no information. To assemble groups of assertions and to 
provide information about Concepts, Tinkar uses a construct called a <b>Semantic</b>. A Semantic is a class 
containing a set of predicates and objects about a subject. A semantic adds meaning to the components it 
references, through the fields it contains as shown in the diagram below. 
</p>
<img src="CompositionalSemantics.png" alt="Compositional Semantics"/>
<p>
A Semantic supports the specification of value sets, 
compositional definitions, and other components requiring internal structure, and it specifies the nature 
of the compositional relationship explicitly. 
</p>
<p>
The Semantic class uses a Concept to define the relationship between the value(s) and the Concept; the 
value itself may be either a concept or some other kind of data type, such as a string. This creates the 
ability to assemble assertions into more complex structures. 
</p>
<p>
As discussed earlier, if an author makes a change to an IdentifiedComponent, the prior Version is unchanged, 
but a new version - with the appropriate STAMP information - is recorded. Users viewing the Concept and 
associated Semantics in the prior context (i.e., as of the prior time, if no other STAMP element has 
changed) will see the old values; users viewing the Concept and associated Semantics in the new context 
will see the new values. 
</p>
<p>
Since it is versioned, a Semantic is manifested as a <b>SemanticChronology</b>, containing a set of 
<b>SemanticVersions</b>. SemanticVersion is a single instance of a Semantic with a STAMP, and a SemanticChronology 
is the set of versions having a STAMP for a Semantic. Concepts, too, are manifest as collections: a 
<b>ConceptChronology</b> consisting of a set of <b>ConceptVersions</b>. ConceptVersion is a single instance of an 
identifier for a concept with a STAMP and the ConceptChronology is the set of versions having a STAMP for a 
concept. A concept identifier specifies a ConceptChronology; specifying a ConceptVersion requires a rule or 
parameter for selecting among STAMP values. 
</p>
<p>
If other IdentifiedComponents depend on the changed concept, these IdentifiedComponents can be identified 
by relationships in the Semantics. The Semantics can assert rules for how to manage these changes. A 
Semantic defining a value set for data entry might automatically accept any deactivations from the source 
system authority, while a Semantic defining a value set for research might automatically decline to adopt 
deactivations, or do so based on whether there are extant operational values. Escalating such decisions for 
human adjudication or review at multiple levels is also always an option. Systems might adopt any number of 
methods for dealing with identified changes: the important thing is to ensure the changes can be identified 
consistently. 
</p>
<a name="field data types"> </a>
<h3>Field Data Types</h3>
<p>
Tinkar supports the following field data types for use with Semantics. 
</p>
<ol>
  <li>
  String - a sequence of characters, either as a literal constant or as a variable. 
  Strings could be used to represent terms from code systems or URLs, textual definitions, etc. 
  </li>
  <li>
  Integer - data type that represents some range of mathematical integers. 
  </li>
  <li>
  Float - represents values as high-precision fractional values. 
  </li>
  <li>
  Boolean - represents the values true and false. 
  </li>
  <li>
  Byte Array - an array of 8-bit signed two's complement integers. 
  </li>
  <li>
  Directed Graph or Digraph - a graph whose edges are ordered pairs of vertices. Each edge can be 
  followed from one vertex to another vertex. 
  </li>
  <li>
  Instant - models a single instantaneous point on a timeline. 
  </li>
  <li>
  Planar Point - position in a two-dimensional space (a plane). 
  </li>
  <li>
  Spatial Point - position in a three-dimensional space. 
  </li>
  <li>
  Component ID List - an ordered list of Component IDs. 
  </li>
  <li>
  Component ID Set - an unordered list of Component IDs. 
  </li>
  <li>
  UUID (Universally Unique Identifier) - A 128-bit number used to identify information in computer systems. 
  </li>
  <li>
  Directed Tree or Ditree - a graph obtained from an undirected tree by replacing each undirected edge 
  by two directed edges with opposite directions. 
  </li>
  <li>
  DiGraph - A graph in which a set of objects are connected where all the edges are directed from one vertex to another. 
  </li>
  <li>
  Vertex - The fundamental unit of data that makes up a graph or tree. 
  <ol type="a">
    <li>
    In Tinkar, property graphs are used as a general-purpose data pattern to represent an abstract syntax 
    tree (AST), such as OWL EL++. This allows for data types without requiring custom nodes.
    <ol type="i">
      <li>
      An AST may be used “during semantic analysis, where the compiler checks for correct usage of the 
      elements of the program and the language. The compiler also generates symbol tables based on the 
      AST during semantic analysis. A complete traversal of the tree allows verification of the correctness 
      of the program. After verifying correctness, the AST serves as the base for code generation. The AST 
      is often used to generate an intermediate representation, sometimes called an intermediate language, 
      for the code generation.” <a href="#footnote15">[15]</a>
      </li>
      <li>
      An AST is made up of nodes and branches. In Tinkar, every tree will always have roots, but they are 
      specific: “An OWL EL root” vs. a “BPMN root”, etc. Each node must have 0 or more children. 
      </li>
    </ol>
    </li>
    <li>
    Shown below is an example of Tinkar output of semantics that reference multiple concepts.
    <img src="VertexExample.png" width="100%" alt="Vertex Example"/>
    In this output, one can see a sufficient set and necessary set. Bulleted items are properties in the 
    node. The output is printed as a “depth first search.” Each depth adds 3 characters of padding and 
    shows how OWL EL++ definitions, using only terminology and a standard property graph data structure, 
    are represented. The 1st one is node index 0 which has a child of node index 8. Node index 0 is the OWL 
    EL++ definition root. Node 8 points to Node 7, and the meaning of Node 8 is that it is a necessary set. 
    Node 7 is 'And' and points to Node 5,1,6. Node 5's meaning is 'Role Type', Value is 'Role group', and 
    its other property is 'Role Operator.' Node 5 points to Node 4. Node 4 is 'And.' Node 3 is 'Role Type.'
    Node 2 is Concept Reference. 7 also points to 1 and 6 (Concept References). 
    </li>
    <li>
    The property graph model demonstrates that each vertex has a meaning. Tinkar can use concepts to 
    represent anything end users might need at nodes. This allows for data types without requiring custom 
    nodes. With no changes to the underlying data structures, Tinkar can represent more than OWL EL++. With 
    updates to terminology, Tinkar can represent any parsable standard, such as BPMN and DMN, using this 
    property graph model and a proper set of terminology concepts and semantics represented using Tinkar. 
    </li>
  </ol>
  </li>
</ol>
<a name="pattern"> </a>
<h3>Pattern (For Semantics)</h3>
<p>
The Tinkar Reference Model defines a first-class feature of the model, the <b>Pattern</b> (<b>PatternVersion</b> and 
<b>PatternChronology</b>) as shown in the figure below.
</p>
<img src="SemanticDefinition.png" alt="Semantic Definition"/>
<p>
A Pattern is a class defining a set of predicates and object types that can be asserted 
about a class of subjects. All Semantics follow Patterns. A PatternVersion is a single instance of a 
pattern with a STAMP and a PatternChronology is the set of versions having a STAMP for a pattern. This 
feature asserts patterns that Semantic components can follow, like an XML or RDF Schema. 
</p>
<p>
Using the Pattern, Semantics with varying fields and data types can be specified to represent any 
structure needed to provide meaning to a concept. For example, if a field within a semantic is used to 
describe an SDO's website, the Meaning would be “URL,” DataType of “String,” and Purpose of “Website.” The 
Pattern would then contain an array of these FieldDefinitions. 
</p>
<a name="overall architecture"> </a>
<h3>Overall Tinkar Architecture</h3>
<p>
The full Tinkar Architecture is shown below, followed by a description of each of the classes referenced in that architecture.
</p>
<img src="TinkarArchitecture.png" alt="Tinkar Architecture"/>
<img src="ClassDefinitions.png" alt="Class Definitions"/>
<a name="coordinate"> </a>
<h3>Coordinate</h3>
<p>
The Tinkar Reference Model supports and encourages the storage of time series data that utilizes multiple 
coordinates, for example, STAMP, Language, Dialect, clinical domains, etc. The ability to efficiently search, 
display, and navigate concepts and semantics requires the ability to calculate combinations of content based 
on one or more of these different coordinates.
</p>
<p>
In order to facilitate the computability of various, complex coordinates, including time series data, a graph 
structure is commonly used in software versioned control systems. A particular type of graph structure that is 
commonly used is a “version graph,” such as a directed acyclic graph. A version graph would enable a Tinkar 
implementation to recover the state of the graph at a particular point in time. Most graph databases do not 
support versioning as a first-class concept. It is possible, however, to create a versioning scheme inside 
the graph model whereby nodes and relationships are timestamped and archived whenever they are modified. The 
downside of such versioning schemes is that they leak into any queries written against the graph, adding a layer 
of complexity to even the simplest query.
</p>
<p>
Types of Coordinates:
</p>
<ol>
  <li>
  STAMP coordinates are the most basic type of coordinate on which all content should be filtered. Examples of 
  STAMP coordinates are: 
  </li>
  <ol type="a">
    <li>
      Most recent version
    </li>
    <li>
      Set of data from several versions
    </li>
    <li>
      All active components only
    </li>
  </ol>
  <li>
  STAMP coordinates are the most basic type of coordinate on which all content should be filtered. Examples of 
  STAMP coordinates are: 
  </li>
  <ol type="a">
    <li>
      Displaying terms based on a language and/or dialect
    </li>
    <li>
      Prioritized list of synonyms based on a particular clinical domain
    </li>
  </ol>
  <li>
  STAMP coordinates are the most basic type of coordinate on which all content should be filtered. Examples of 
  STAMP coordinates are: 
  </li>
  <ol type="a">
    <li>
      Result from various Description Logic Classifiers
    </li>
  </ol>
  <li>
  STAMP coordinates are the most basic type of coordinate on which all content should be filtered. Examples of 
  STAMP coordinates are: 
  </li>
  <ol type="a">
    <li>
      Stated vs. inferred relationships from SNOMED CT®
    </li>
    <li>
      Concepts inclusion/exclusion for a particular domain
    </li>
  </ol>
</ol>
<p>
As the Tinkar specification evolves towards a DSTU and Connectathons, 
more coordinates and detailing will be provided.
</p>
<a name="calculating coordinates"> </a>
<h3>Calculating Coordinates</h3>
<p>
The ComponentChronology contains all the versions of a component from the date it was instantiated until the 
most recent version. Components only get a new version whenever something about the component changes. To 
calculate the latest version requires the ability to find the most recent version of each component. Utilizing 
the STAMP Coordinates supports calculating all other coordinates: 
</p>
<ol>
  <li>
  Identify the Module(s) the user would like to view/search/modify.
  </li>
  <li>
  Identify the Path the user would like to view/search/modify.
  </li>
  <li>
  Identify the Status or Statuses the user would like to view/search/modify.
  </li>
  <li>
  If relevant, identify the Author(s) the user would like to view/search/modify.
  </li>
  <li>
  The last piece of the STAMP coordinate (time) is the most difficult to calculate. In most cases the user will 
  need to find the most recent version of the component as of the current time to calculate this point of the 
  coordinate. However, since Tinkar supports and encourages the representation of historical, the user may need 
  to calculate the most recent version as of a different point in time.
  </li>
</ol>
<p>
After the STAMP Coordinates have been calculated, additional coordinates can then be applied as well. 
For example, applying a language and dialect coordinate will be important not only for viewing and searching, 
but also to determine the appropriate preferred name for displaying a hierarchy.
</p>
<a name="Tinkar Starter Data Model Concepts"> </a>
<h3>Tinkar Starter Data Model Concepts</h3>
<table>
  <tr>
    <th>Fully Qualified Name</th>
    <th>Definition</th>
    <th>Origin</th>
  </tr>
  <tr>
    <td>Acceptable (foundation metadata concept)</td>
    <td>Specifies that a description is acceptable, but not preferred within a language or dialect.</td>
    <td>DESCRIPTION_ACCEPTABILITY</td>
  </tr>
    <tr>
    <td>Active status</td>
    <td>Concept used to represent a status for components that are active.</td>
    <td>STATUS_VALUE</td>
  </tr>
    <tr>
    <td>Author</td>
    <td></td>
    <td>ROOT_VERTEX</td>
  </tr>
    <tr>
    <td>Canceled status</td>
    <td>Concept used to represent a status for components that are canceled</td>
    <td>STATUS_VALUE</td>
  </tr>
    <tr>
    <td>Chinese Language</td>
    <td>A concept representing the Chinese Language</td>
    <td>LANGUAGE</td>
  </tr>
    <tr>
    <td>Component field</td>
    <td>A display field type that references a concept ID.</td>
    <td>DISPLAY_FIELDS</td>
  </tr>
    <tr>
    <td>Component Id list</td>
    <td>A display field that references an ordered list of Concept IDs.</td>
    <td>DISPLAY_FIELDS</td>
  </tr>
    <tr>
    <td>Component Id set field</td>
    <td>A display field that references an unordered list of Concept IDs.</td>
    <td>DISPLAY_FIELDS</td>
  </tr>
    <tr>
    <td>Concept Reference</td>
    <td>The concept referred to by the is_a axiom relationship or the axiom role relationship.</td>
    <td>IS_A; ROLE</td>
  </tr>
    <tr>
    <td>Czech Language</td>
    <td>A concept representing the Czech Language.</td>
    <td>LANGUAGE</td>
  </tr>
    <tr>
    <td>Danish Language</td>
    <td>A concept representing the Danish Language.</td>
    <td>LANGUAGE</td>
  </tr>
    <tr>
    <td>Definition description type </td>
    <td>Semantic value describing the description type for the description pattern is a definition</td>
    <td>DESCRIPTION_TYPE</td>
  </tr>
    <tr>
    <td>Description</td>
    <td>Human readable text for a concept</td>
    <td>MODEL_CONCEPT</td>
  </tr>
    <tr>
    <td>Description acceptability</td>
    <td> Whether a given human readable text for a concept is permissible</td>
    <td>MODEL_CONCEPT</td>
  </tr>
    <tr>
    <td>Description case sensitive </td>
    <td>Assumes the description is dependent on capitalization </td>
    <td>DESCRIPTION_CASE_SIGNIFICANCE</td>
  </tr>
    <tr>
    <td>Description case significance </td>
    <td>Specifies how to handle the description text interms of case sensitivity </td>
    <td>MODEL_CONCEPT</td>
  </tr>
    <tr>
    <td>Description not case sensitive </td>
    <td>Value which designate character as not sensitive for a given description </td>
    <td>DESCRIPTION_CASE_SIGNIFICANCE</td>
  </tr>
    <tr>
    <td>Description semantic</td>
    <td>Purpose and meaning for the description pattern and dialect patterns </td>
    <td>MODEL_CONCEPT</td>
  </tr>
    <tr>
    <td>Description type</td>
    <td>Specifying what type of description it is i.e. is it fully qualified or regular and etc.</td>
    <td>MODEL_CONCEPT</td>
  </tr>
    <tr>
    <td>Development path</td>
    <td>A path that specifies that the components are currently under development</td>
    <td>PATH</td>
  </tr>
    <tr>
    <td>Dialect</td>
    <td>Specifies the dialect of the language.</td>
    <td>MODEL_CONCEPT</td>
  </tr>
    <tr>
    <td>DiGraph field</td>
    <td>A display field that references a di-graph whose edges are ordered pairs of vertices. Each edge can be followed from one vertex to another vertex.</td>
    <td>DISPLAY_FIELDS</td>
  </tr>
    <tr>
    <td>Display Fields </td>
    <td>Captures the human readable terms</td>
    <td>MODEL_CONCEPT</td>
  </tr>
    <tr>
    <td>DiTree field</td>
    <td>A display field that references a graph obtained from an undirected tree by replacing each undirected edge by two directed edges with opposite directions.</td>
    <td>DISPLAY_FIELDS</td>
  </tr>
    <tr>
    <td>Dutch Language</td>
    <td>A concept representing the Dutch Language.</td>
    <td>LANGUAGE</td>
  </tr>
    <tr>
    <td>EL++ Inferred terminological axioms</td>
    <td></td>
    <td>MODEL_CONCEPT</td>
  </tr>
    <tr>
    <td>EL++ Stated terminological axioms</td>
    <td></td>
    <td>MODEL_CONCEPT</td>
  </tr>
    <tr>
    <td>English Dialect</td>
    <td>Specifies the dialect of theEnglish language</td>
    <td>DIALECT</td>
  </tr>
    <tr>
    <td>English Language</td>
    <td>A concept representing the English Language.</td>
    <td>LANGUAGE</td>
  </tr>
    <tr>
    <td>Existential restriction</td>
    <td>Existential restrictions describe objects that participate in at least one relationship along a specified property to objects of a specified class.</td>
    <td>ROLE_OPERATOR</td>
  </tr>
    <tr>
    <td>Float field</td>
    <td>Represents values as high-precision fractional values.</td>
    <td>DISPLAY_FIELDS</td>
  </tr>
    <tr>
    <td>French Language</td>
    <td>A concept representing the French Language.</td>
    <td>LANGUAGE</td>
  </tr>
    <tr>
    <td>Fully qualified name description type</td>
    <td>Fully qualified name is a description that uniquely identifies and differentiates it from other concepts with similar descriptions</td>
    <td>DESCRIPTION_TYPE</td>
  </tr>
    <tr>
    <td>German Language</td>
    <td>A concept representing the German Language.</td>
    <td>LANGUAGE</td>
  </tr>
    <tr>
    <td>Great Britian English dialect</td>
    <td>Great Britain: English Langauge reference set</td>
    <td>ENGLISH_DIALECT</td>
  </tr>
    <tr>
    <td>Identifier Source</td>
    <td>An identifier used to label the source of the identity of a unique component.</td>
    <td>MODEL_CONCEPT</td>
  </tr>
    <tr>
    <td>Identifier Value</td>
    <td>The literal string value identifier</td>
    <td>MODEL_CONCEPT</td>
  </tr>
    <tr>
    <td>Implication Set</td>
    <td>A set of relationships that indicate something has an implication. Not necessarily or sufficient but implicated.</td>
    <td>EL_PLUS_PLUS_STATED_TERMINOLOGICAL_AXIOMS; EL_PLUS_PLUS_INFERRED_TERMINOLOGICAL_AXIOMS</td>
  </tr>
    <tr>
    <td>Inactive Status</td>
    <td>Concept used to represent a status for components that are no longer active</td>
    <td>STATUS_VALUE</td>
  </tr>
    <tr>
    <td>Inferred Navigation</td>
    <td>The origins and destinations for concepts based on the reasoner generated inferred terminological axioms</td>
    <td>MODEL_CONCEPT</td>
  </tr>
    <tr>
    <td>Integer Field</td>
    <td>data type that represents some range of mathematical integers</td>
    <td>DISPLAY_FIELDS</td>
  </tr>
    <tr>
    <td>Integrated Knowledge Management</td>
    <td>The Root Vertex</td>
    <td></td>
  </tr>
    <tr>
    <td>Irish Language</td>
    <td>A concept representing the Irish Language.</td>
    <td>LANGUAGE</td>
  </tr>
    <tr>
    <td>Is-a</td>
    <td>Designates the parent child relationship</td>
    <td>MODEL_CONCEPT</td>
  </tr>
    <tr>
    <td>Italian Language</td>
    <td>A concept representing the Italian Language.</td>
    <td>LANGUAGE</td>
  </tr>
    <tr>
    <td>Korean Language</td>
    <td>A concept representing the Korean Language.</td>
    <td>LANGUAGE</td>
  </tr>
    <tr>
    <td>Language</td>
    <td>Specifies the language of the description text.</td>
    <td>MODEL_CONCEPT</td>
  </tr>
    <tr>
    <td>Language for Description</td>
    <td>The semantic value indicating which language is used in the description text</td>
    <td>MODEL_CONCEPT</td>
  </tr>
    <tr>
    <td>Lithuanian Language</td>
    <td>A concept representing the Korean Language.</td>
    <td>LANGUAGE</td>
  </tr>
    <tr>
    <td>Logical Definition</td>
    <td>The semantic value describing the purpose of the stated and inferred terminological axioms.</td>
    <td>MODEL_CONCEPT</td>
  </tr>
    <tr>
    <td>Master path</td>
    <td>A default path “branch” for components. This path represents those finalized or published components in production</td>
    <td>PATH</td>
  </tr>
    <tr>
    <td>Meaning</td>
    <td>The interpretation or explanation field for a pattern/semantics</td>
    <td>MODEL_CONCEPT</td>
  </tr>
    <tr>
    <td>Model concept</td>
    <td></td>
    <td>ROOT_VERTEX</td>
  </tr>
    <tr>
    <td>Module</td>
    <td>A module is identified by a concept and may be annotated with additional information such as organizing content for maintenance and publication purposes.</td>
    <td>ROOT_VERTEX</td>
  </tr>
    <tr>
    <td>Necessary set</td>
    <td>A set of relationships that is always true of a concept. A concept that only contains necessary conditions is considered primitive</td>
    <td>EL_PLUS_PLUS_STATED_TERMINOLOGICAL_AXIOMS; EL_PLUS_PLUS_INFERRED_TERMINOLOGICAL_AXIOMS</td>
  </tr>
    <tr>
    <td>Path</td>
    <td>A set of assets under version control that can be managed distinctly from other assets. Paths “branch” from other paths when established, and can be “merged” with other paths as well.</td>
    <td>ROOT_VERTEX</td>
  </tr>
  <tr>
    <td>Polish Language</td>
    <td>A concept representing the Polish Language.</td>
    <td>LANGUAGE</td>
  </tr>
    <tr>
    <td>Preferred</td>
    <td>Specifies that a description is preferred within a language or dialect. There will be one preferred description for each description type.</td>
    <td>DESCRIPTION_ACCEPTABILITY</td>
  </tr>
    <tr>
    <td>Primordial module</td>
    <td></td>
    <td>MODULE</td>
  </tr>
    <tr>
    <td>Prerequisite path</td>
    <td>A path that contains components that are shared across all paths and contain infrastructure components.</td>
    <td>PATH</td>
  </tr>
    <tr>
    <td>Premundane status</td>
    <td>Concept used to represent a status for components that have not yet been released and exist in their most basic form.</td>
    <td>STATUS_VALUE</td>
  </tr>
    <tr>
    <td>Purpose</td>
    <td>The reason for which a Tinkar value in a pattern was created or for which it exist.</td>
    <td>MODEL_CONCEPT</td>
  </tr>
    <tr>
    <td>Regular name description type</td>
    <td>There may be descriptions/synonyms marked as “regular.”</td>
    <td>DESCRIPTION_TYPE</td>
  </tr>
    <tr>
    <td>Relationship destination</td>
    <td>Signifies path to child concepts which are more specific than the Tinkar term</td>
    <td>MODEL_CONCEPT</td>
  </tr>
    <tr>
    <td>Relationship origin</td>
    <td>Signifies path to parent concepts which are more general than the Tinkar term</td>
    <td>MODEL_CONCEPT</td>
  </tr>
    <tr>
    <td>Role</td>
    <td>Is an abstract representation of a high-level role for a therapeutic medicinal product; the concepts are not intended to describe a detailed indication for therapeutic use nor imply that therapeutic use is appropriate in all clinical situations.</td>
    <td>ROLE_GROUP; EL_PLUS_PLUS_STATED_TERMINOLOGICAL_AXIOMS; EL_PLUS_PLUS_INFERRED_TERMINOLOGICAL_AXIOMS</td>
  </tr>
    <tr>
    <td>Role group</td>
    <td>An association between a set of attribute or axiom value pairs that causes them to be considered together within a concept definition or postcoordinated expression.</td>
    <td>EL_PLUS_PLUS_STATED_TERMINOLOGICAL_AXIOMS; EL_PLUS_PLUS_INFERRED_TERMINOLOGICAL_AXIOMS</td>
  </tr>
    <tr>
    <td>Role operator</td>
    <td>Concept that is used to describe universal vs existential restrictions.</td>
    <td>ROLE_GROUP</td>
  </tr>
    <tr>
    <td>Role type</td>
    <td>Refers to a concept that represents a particular kind of realtionship that can exist between two entities. It defines the specific function or responsibility that one entity plays in relation to another.</td>
    <td>ROLE</td>
  </tr>
    <tr>
    <td>Russian Language</td>
    <td>A concept representing the Russian Language.</td>
    <td>LANGUAGE</td>
  </tr>
    <tr>
    <td>Sandbox path</td>
    <td>A path for components under testing.</td>
    <td>PATH</td>
  </tr>
    <tr>
    <td>Spanish Language</td>
    <td>A concept representing the Spanish Language.</td>
    <td>LANGUAGE</td>
  </tr>
    <tr>
    <td>Stated Navigation</td>
    <td>The origins and destinations for concepts based on the reasoner generated stated terminological axioms</td>
    <td>MODEL_CONCEPT</td>
  </tr>
    <tr>
    <td>Status value</td>
    <td>The status of the STAMP Coordinate(Active, Cancelled, Inactive, Primordial)</td>
    <td>ROOT_VERTEX</td>
  </tr>
    <tr>
    <td>String Field</td>
    <td>a sequence of characters, either as a literal constant or as a variable. Strings could be used to represent terms from code systems or URLs, textual definitions, etc.</td>
    <td>DISPLAY_FIELDS</td>
  </tr>
    <tr>
    <td>Sufficient set</td>
    <td> A set of relationships that differentiate a concept and its subtypes from all other concepts. A concept that contains at least one set of necessary and sufficient conditions is considered defined.</td>
    <td>EL_PLUS_PLUS_STATED_TERMINOLOGICAL_AXIOMS; EL_PLUS_PLUS_INFERRED_TERMINOLOGICAL_AXIOMS</td>
  </tr>
    <tr>
    <td>Swedish Language</td>
    <td>A concept representing the Swedish Language.</td>
    <td>LANGUAGE</td>
  </tr>
    <tr>
    <td>Text for description</td>
    <td>Captures the human readable text for a description in Komet</td>
    <td>MODEL_CONCEPT</td>
  </tr>
    <tr>
    <td>United States of America English dialect</td>
    <td>Particular form of language specific form of English language, particular to US</td>
    <td>ENGLISH_DIALECT; US_DIALECT_PATTERN</td>
  </tr>
    <tr>
    <td>Universal Restriction</td>
    <td>Universal restrictions constrain the relationships along a given property to concepts that are members of a specific class.</td>
    <td>ROLE_OPERATOR</td>
  </tr>
    <tr>
    <td>UNIVERSALLY_UNIQUE_IDENTIFIER</td>
    <td>A universally unique identifier that uniquely represents a concept in Tinkar</td>
    <td>IDENTIFIER_SOURCE</td>
  </tr>
  <tr>
    <td>User</td>
    <td></td>
    <td>AUTHOR</td>
  </tr>
  <tr>
    <td>Withdrawn status</td>
    <td>Concept used to represent a status for components that are withdrawn.</td>
    <td>STATUS_VALUE</td>
  </tr>
</table>



<hr />
<p id="footnote15">
[15] Abstract syntax tree. Wikipedia; 2020. Available from: https://en.wikipedia.org/wiki/Abstract_syntax_tree.
</p>
</div>
